two pointer:

2 sum

   return index or return value
  
3 sum   
   start [(point1 point2) of 2 sum]   direction ->
   [(point1 point2) of 2 sum]  start  direction <-
   skip duplicate elements:
      i++
      j--
      while(i<j&&num[i]==num[i-1]) i++;
      while(i<j&&nums[j]==num[j+1]) j--;
3 sum closest
   closet problem: abs
4 sum
k sum
triangle count
trapping rain water
    i j  left  right
    if(height[left]<height[right]){
        update left (if)
        i++
    }else{
        update right (if)
        j--
    }

container with most water


partition

quick sort
  pivot left right
  while - right-- - num[left]=num[right]
  while - left++ - num[right]=num[left]

partition-array
sort colors
partition Array by Odd and Even
Sort letters by Case
Valid Palindrome