point: 收集每道题循环的条件 以及 结束循环的条件， 这个非常耗时间

技巧 and awareness:
0. 链表查找以及crud操作
     和数组写程序的区别在于， 数组可以 i-1, 链表不能，看:
		//i+1 例子    链表仅仅支持这种，因为链表没有的前驱节点的指针，除非保存起来，但这样会复杂，也容易出错
                int i=-1;
		
		for(;i+1<nums.length&&nums[i+1]<=a;){
			i++;
		}
		
		System.out.println(nums[i]);
	
		//j-1  例子
		int j=0;
		
		for(;j<nums.length&&nums[j]<=a;){
			j++;
		}
		
		System.out.println(nums[j-1]);

                //链表循环操作模板
                ListNode head=null;
		ListNode dummy= new ListNode(-1);
		dummy.next=head;
		head =dummy;
		while(head.next!=null && head.next.val>10){//好理解，不用多想，head.next不满足的话，一定是head满足了
			head = head.next;
		}



1. 哨兵节点 dummyNode  避免边界条件
   见:  http://blog.csdn.net/chencheng126/article/details/39029889


    ListNode dummy=new ListNode(-1);//指向head，用于保存head
    ListNode tmp = dummy;//用于循环前驱,tmp指针会改变

    

2. 创建永远是 先建立下一个，再cur = cur.next

3. 二级指针可以避免使用prev
   http://www.cnblogs.com/gentleh/p/3960608.html

4. 指针乱指存在环的问题
     * 头指针next没置空

5. 创建链表
   头插法
   while
     tmp=new;
     tmp.next=dummy.next;
     dummy.next=tmp;

   尾插法
   tmp=dummy
   while
     tmp.next=new;
     tmp=tmp.next;

6. 1(cur)-2(next)-3, when increment cur and next: cur = next; next=next.next

7. 在循环链表的时候一定要注意    head=head.next

8. 链表中间某一个位置中断掉，一定要考虑边界条件！


*creation of LinkedList
   follow above 5
point: tmp

*reverse List
point: next/cur/tmp
       1. reverse pointer between cur and next
       2.

 move cur,next

       	public ListNode reverse(ListNode list){
      if(list == null) return null;

	  ListNode next = list.next;
	  ListNode cur = list;
	  ListNode tmp=null;
	  while(next!=null){
		if(cur==list && cur!=null)
			cur.next=null;
            //save the third one
	    tmp = next.next;
            //reverse pointer
	    next.next = cur;
            //move cur and next
	    cur=next;
	    next=tmp;
	    
	  }

	  return cur;
	}

*delete list

recursion:
  ListNode traverse(ListNode head, int val){
    if(head==null) return null;
    ListNode next = traverse(head.next,val);
    if(head.val==val)  return next;
    head.next = next;

}


non-recursion:
point: dummy node/prev/cur(to delete)
       1. if val==cur, update pointer of (prev)1-2(cur)-3 changes to 1-3   else update prev to be cur
       2. update cur to be cur.next
  ListNode deleteNode(ListNode head, int val){
    if( head==null ) return;
    ListNode dummy = new ListNode(-1);
    dummy.next=head;
    ListNode prev= dummy;
    ListNode cur= head;

    while(cur!=null){
      if(cur.val==val){
        prev.next = cur.next 
      }else{
        prev = cur;
      }
      cur = cur.next;

    }
    return dummy.next;   
}
